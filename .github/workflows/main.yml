name: build sing-box with proxy providers

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check-release:
    name: Check Sing-Box Release
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.get_release.outputs.latest_release }}
      new_release: ${{ steps.check_release.outputs.new_release }}
    steps:
      - name: Get latest release from sing-box
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)
          echo "latest_release=$latest_release" >> $GITHUB_OUTPUT

      - name: Check if new release is available
        id: check_release
        run: |
          current_release=$(cat .current_release || echo "none")
          latest_release=${{ steps.get_release.outputs.latest_release }}
          if [ "$current_release" != "$latest_release" ]; then
            echo "New release detected: $latest_release"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo $latest_release > .current_release
          else
            echo "No new release"
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Debug build
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.new_release == 'true'
    steps:
      - env:
          latest_release: ${{needs.check-release.outputs.latest_release}}
          new_release: ${{needs.check-release.outputs.new_release}}
        run: echo "$latest_release $new_release"
      - name: Debug output
        run: |
          echo "Latest release: ${{ needs.check-release.outputs.latest_release }}"
          echo "Latest release from env: ${{ env.latest_release }}"
      - name: Cancel previous
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}
      - name: Set variables
        run: |
          VERSION=${{ needs.check-release.outputs.latest_release }}
          echo "RELEASE_NAME=Released on $VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$VERSION" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: SagerNet/sing-box
          ref: main
      - name: with_clash_ui
        id: dashboard
        run: |  
          git submodule init
          git submodule update
      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -n 1 | cut -d '"' -f 4)
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.version.outputs.go_version }}
      - name: Cache go module
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      - name: Initialize Go module
        run: |
          mkdir -p build
          pushd build
          go mod init build
          go get -v github.com/sagernet/sing-box@$VERSION
          popd
        continue-on-error: true
      - name: Run Test
        run: |
          go test -v ./...

  cross:
    strategy:
      matrix:
        include:
          # freebsd
          - name: freebsd-amd64
            goos: freebsd
            goarch: amd64
            goamd64: v1
          - name: freebsd-amd64-v3
            goos: freebsd
            goarch: amd64
            goamd64: v3
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      CGO_ENABLED: 0
      TAGS: with_clash_api,with_quic
    steps:
      - name: Debug output
        run: |
          echo "Latest release: ${{ needs.check-release.outputs.latest_release }}"
      - name: Set variables
        run: |
          VERSION=${{ needs.check-release.outputs.latest_release }}
          echo "RELEASE_NAME=Released on $VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$VERSION" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: SagerNet/sing-box
          ref: main
      - name: with_clash_ui
        id: dashboard
        run: |  
          git submodule init
          git submodule update
      - name: Get latest go version
        id: version
        run: |
          ls -lh
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -n 1 | cut -d '"' -f 4)
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.version.outputs.go_version }}
      - name: Cache go module
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      - name: Build
        id: build
        run: make
      - name: Test
        run: |
          echo ${{ contains(matrix.name, 'windows') }}
          echo ${{ matrix.name }}
      - name: Rename Windows
        if: ${{ contains(matrix.name, 'windows') }}
        run: mv sing-box* sing-box-${{ matrix.name }}.exe
      - name: Rename
        if: ${{ contains(matrix.name, 'linux') || contains(matrix.name, 'bsd') || contains(matrix.name, 'darwin') || contains(matrix.name, 'android') }}
        run: mv sing-box* sing-box-${{ matrix.name }}
      #- name: Upload artifact
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: sing-box-${{ matrix.name }}
      #    path: sing-box*
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          files: |
            sing-box*